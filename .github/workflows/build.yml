name: build-kino
on:
  push:
    branches:
      - main
  pull_request:
  merge_group:    
  schedule:
    - cron: '0 7 * * *'  # 7 am everyday
  workflow_dispatch:
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: [main]
        image_name: [kinoite]
        major_version: [38,39]
        include:
          - major_version: 38
            is_latest_version: true
            is_stable_version: true
    steps: 
      - name: checkout
        uses: actions/checkout@v4

      - name: Matrix Variables
        run: |
          echo "SOURCE_IMAGE=${{ matrix.image_name }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ matrix.image_name }}-${{ matrix.image_flavor }}" >> $GITHUB_ENV
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ 'nvidia' == matrix.image_flavor && format('{0}-{1}', matrix.major_version, matrix.nvidia_version) || format('{0}', matrix.major_version) }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
            if [[ "${{ matrix.image_flavor }}" == "main" ]] || \
               [[ "${{ matrix.is_latest_nvidia }}" == "true" ]]; then
                # assume matrix is honestis_latest_nvidia==true only when image_flavor==nvidia
                COMMIT_TAGS+=("pr-${{ github.event.number }}")
                COMMIT_TAGS+=("${SHA_SHORT}")
            fi
          fi

          BUILD_TAGS=("${VARIANT}")

          if [[ "${{ matrix.is_latest_nvidia }}" == "true" ]]; then
              BUILD_TAGS+=("${{ matrix.major_version }}-current")
              BUILD_TAGS+=("${{ matrix.major_version }}")
          fi

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
            if [[ "${{ matrix.image_flavor }}" == "main" ]] || \
               [[ "${{ matrix.is_latest_nvidia }}" == "true" ]]; then
                # assume matrix is honest: is_latest_nvidia==true only when image_flavor==nvidia
                BUILD_TAGS+=("${TIMESTAMP}")
                BUILD_TAGS+=("latest")
            fi
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              for tag in "${BUILD_TAGS[@]}"; do
                alias_tags+=("ghcr.io/smerschjohann/kino/${IMAGE_NAME}:${tag}")
              done

          fi

          echo "Generated the following build tags: "
          for TAG in "${alias_tags[@]}"; do
              echo "${TAG}"
          done

          IFS=,
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get current version
        id: labels
        run: |
          ver=$(skopeo inspect docker://quay.io/fedora-ostree-desktops/${{ env.SOURCE_IMAGE }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=Kino is a ${{ matrix.image_name }} image with batteries included${{ 'nvidia' == matrix.image_flavor && ' and Nvidia drivers added' || '' }}
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/kino/README.md

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Containerfile
          push: true
          tags: ${{ steps.generate-tags.outputs.alias_tags }}
          cache-from: ghcr.io/smerschjohann/kino/cache
          cache-to: ghcr.io/smerschjohann/kino/cache
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ matrix.image_flavor }}
          build-args: |
            IMAGE_NAME=${{ matrix.image_name }}
            SOURCE_IMAGE=${{ env.SOURCE_IMAGE }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
            NVIDIA_MAJOR_VERSION=${{ matrix.nvidia_version }}

      # Sign container
#      - uses: sigstore/cosign-installer@v3.1.2
#        if: github.event_name != 'pull_request'

#      - name: Sign container image
#        if: github.event_name != 'pull_request'
#        run: |
#          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
#        env:
#          TAGS: ${{ steps.push.outputs.digest }}
#          COSIGN_EXPERIMENTAL: false
#          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all builds successful
    runs-on: ubuntu-latest
    needs: [push-ghcr]
    steps:
      - name: Exit
        shell: bash
        run: exit 0